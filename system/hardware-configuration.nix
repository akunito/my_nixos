# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/profiles/qemu-guest.nix")
    ];

  boot.initrd.availableKernelModules = [ "ata_piix" "uhci_hcd" "virtio_pci" "virtio_scsi" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/d79da14c-8b45-4030-8942-aefac67f2d28";
      fsType = "btrfs";
      options = [ "subvol=@" ];
    };

  boot.initrd.luks.devices."luks-fcd2102a-fb2a-4dff-946c-682f3de2af8f".device = "/dev/disk/by-uuid/fcd2102a-fb2a-4dff-946c-682f3de2af8f";

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/c50672b8-f0d6-4df8-817e-81884eb66526";
      fsType = "btrfs";
    };

  boot.initrd.luks.devices."luks-16027147-9c4e-4c6a-a7a0-ec4dd848f573".device = "/dev/disk/by-uuid/16027147-9c4e-4c6a-a7a0-ec4dd848f573";

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/A969-EF0E";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  fileSystems."/mnt/NFS_media" =
    { device = "192.168.20.200:/mnt/hddpool/media";
      fsType = "nfs4";
    };

  fileSystems."/mnt/NFS_library" =
    { device = "192.168.20.200:/mnt/ssdpool/library";
      fsType = "nfs4";
    };

  fileSystems."/mnt/NFS_emulators" =
    { device = "192.168.20.200:/mnt/ssdpool/emulators";
      fsType = "nfs4";
    };

  fileSystems."/mnt/DATA_4TB" =
    { device = "/dev/disk/by-uuid/0904cd17-7be1-433a-a21b-2c34f969550f";
      fsType = "ext4";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/bf12bf50-95da-4c42-be46-26e76b7b212a"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-04ac87fa15c0.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-67291aa56c40.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-fa1a4a26bc4e.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.ens18.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
