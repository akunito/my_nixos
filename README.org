#+title: NixOS Config (forked from Librephoenix)
#+author: Akunito

** How I got here?
I found videos from Librephoenix where I started to learn about NixOS until I reached the point where I needed to do my own system profiles to build different infraestructure for my different computers, like homeLab, family's laptop, etc.

* My changes
I have implemented my own features, however most of the original code is still there, but some features are partially commented.
NOTE: All original documentation from Librephoenix is below on this document, after my list of changes.

** Plasma 5 and Plasma 6 implemented. 
Currently I'm not using Hyprland as I'm using MacOS, by the moment, at least until Asahi Linux releases on M3 CPUs. Then maybe I will try to use NixOS on my MacBook. That's why I switched to Plasma, mostly to reduce the maintenance time. Plasma just works out of the box with simple and advances features. Everyday I have to deal with different computers on my work or studies or projects, etc. This includes Windows, Linux and MacOS. That got me very annoyed by shortcuts and keys, when switching between them I was constantly mixing them. So I developed a kind of framework that allows me to use the same shotcuts on all my computers. (Additionally I can use Caps Lock as a Hyper key for all global shortcuts like navigate desks) Plasma allows to do this quite easily, if you combine it with a QMK or VIA keyboard. You can find that project on [[https://github.com/akunito/SpinachKeyboardFramework][Keyboard Framework respository]] in case you are interested.

** Plasma configuration files are integrated on this project as well. There are few scripts
to integrate them, you can check more on the /User/wm/Plasma6 files, where it's explained deeper.

** SSH Server to send the passphrase and Open your LUKS encrypted disks.
Librephoenix has a homeLab repository where he explains the different options we have for encrypting our data. However he avoided the full encryption of the system because the inconvinience of implementing it on a server where if you restart the computer you cannot set the passphrase when you are out of home. However I have implemented this by setting a SSH server on boot, where it is possible to connect and set the passphrase to open all your LUKS devices. Additionally you can combine this method with the method from Librephoenix, what will increase even more the security, I think. Check more about on his repository.

** Additional/secondary LUKS devices
On drives.nix you can find instructions how to add additional LUKS devices to be opened automatically on boot.

** Virtualization QEMU server & remote.
I managed to use this and connect remotelly from MacOS to use virt-manager on the Mac, but with the VM running totally on the NixOS server.
- Note: virt-manager has permission issues if you set your machines or ISOs on a directory under /home
- Note: if you want to do this from your MacBook, instructions on the next:

** Virt-manager from MacOS to Linux
- [[https://github.com/jeffreywildman/homebrew-virt-manager][Virt-manager for MacOS Repository]]
- [[https://gist.github.com/anamorph/3af11f2bd54af54a45c8b3bdafcc9939][How to install it]]
- Find my summary here as well:
#+BEGIN_SRC sh
    brew tap jeffreywildman/homebrew-virt-manager
    brew install py2cairo
    brew install virt-viewer virt-manager
    brew cask install xquartz
    virt-manager --no-fork # and run the manager
#+END_SRC

** Firewall, iptables rules
I'm not sure yet if this is the best approach for NixOS firewall. However I want to learn more about firewall and networking so I have set some fules for iptables. You can find them under firewall.nix 

** More variables for a dynamic flake.nix management.
I have added more variables that allows for example:
- Enable or Disable Docker or Virtualization by setting true or false.
- Set your SSH authorizedKeys only on flake.nix, and will be inherited on the rest of .nix modules or files.
- Enable or Disable SSH on BOOT by setting true or false.
This allows you to set faster many of the features for a different computer, without modifying any other file, but only flake.nix, making much easier to manage different computers and keeping updated each of theirs local repositories.
You can find different backups as examples of flake.nix like flake.nix.SERVER or flake.nix.AGALAPTOP

** To set network bridges for Virsh/VMs
You can find a tutorial on [[https://nixos.wiki/wiki/Libvirt][NixOS wiki Libvirt]]
And a example here:
#+BEGIN_SRC sh
    # go to the directory where you want to store these files
    cd /mnt/DATA_4TB/Syncthing/git_repos/myProjects/homeLab      

    # create a file 
    touch networking_nm-bridge.xml

    # with this content
    <network>
      <name>nm-bridge</name>
      <forward mode='bridge'/>
      <bridge name='nm-bridge'/>
    </network>

    # Add and enable the bridge interface
    # you might need to use sudo for some of the next commands
    virsh net-define network_nm-bridge.xml
    virsh net-start nm-bridge
    sudo ip link add nm-bridge type bridge
    sudo ip address ad dev nm-bridge 192.168.0.0/24
    sudo ip link set dev nm-bridge up

    # if you need to remove a wrong ip address use this
    ip address del 10.25.0.1/24 dev nm-bridge
#+END_SRC

** Printer Brother Laser
Added driver for Brother Laser printers.
Added some comments how to setup.
TODO: Implement sharing printer by CAPS on network. I started but didn't finish it.

** Kernel modules
Additional [[./kernelModules.org][kernelModules.org]] document that explain the kernel modules for CPU Power Management


* Original Document

[[https://gitlab.com/librephoenix/nixos-config][Main Repo Link (GitLab)]]

[[https://github.com/librephoenix/nixos-config][Mirror Repo Link (GitHub)]]

[[https://codeberg.org/librephoenix/nixos-config][Mirror Repo Link (Codeberg)]]

** What is this repository?
These are my dotfiles (configuration files) for my NixOS setup(s).

Here is my main setup:
[[desktop.png]]

** My Themes
[[https://github.com/danth/stylix#readme][Stylix]] (and [[https://github.com/SenchoPens/base16.nix#readme][base16.nix]], of course) is amazing, allowing you to theme your entire system with base16-themes.

Using this I have [[./themes][55+ themes]] (I add more sometimes) I can switch between on-the-fly. Visit the [[./themes][themes directory]] for more info and screenshots!

** Install
I wrote some reinstall notes for myself [[./install.org][here (install.org)]].

TLDR: You shouldâ„¢ be able to install my dotfiles to a fresh NixOS system with the following experimental script:
#+begin_src sh :noeval
nix-shell -p git --command "nix run --experimental-features 'nix-command flakes' gitlab:librephoenix/nixos-config"
#+end_src

Disclaimer: Ultimately, I can't gaurantee this will work for anyone other than myself, so /use this at your own discretion/. Also my dotfiles are /highly/ opinionated, which you will discover immediately if you try them out.

Potential Errors: I've only tested it working on UEFI with the default EFI mount point of =/boot=. I've added experimental legacy (BIOS) boot support, but it does rely on a quick and dirty script to find the grub device. If you are testing it using some weird boot configuration for whatever reason, try modifying =bootMountPath= (UEFI) or =grubDevice= (legacy BIOS) in =flake.nix= before install, or else it will complain about not being able to install the bootloader.

Note: If you're installing this to a VM, Hyprland won't work unless 3D acceleration is enabled.

Security Disclaimer: If you install or copy my =homelab= or =worklab= profiles, /CHANGE THE PUBLIC SSH KEYS UNLESS YOU WANT ME TO BE ABLE TO SSH INTO YOUR SERVER. YOU CAN CHANGE OR REMOVE THE SSH KEY IN THE RELEVANT CONFIGURATION.NIX/:
- [[./profiles/homelab/configuration.nix][configuration.nix]] for homelab profile
- [[./profiles/worklab/configuration.nix][configuration.nix]] for worklab profile

** Modules
Separate Nix files can be imported as modules using an import block:
#+BEGIN_SRC nix
imports = [ ./import1.nix
            ./import2.nix
            ...
          ];
#+END_SRC

This conveniently allows configurations to be (*cough cough) /modular/ (ba dum, tssss).

I have my modules separated into two groups:
- System-level - stored in the [[./system][system directory]]
  - System-level modules are imported into configuration.nix, which is what is sourced into [[./flake.nix][my flake (flake.nix)]]
- User-level - stored in the [[./user][user directory]] (managed by home-manager)
  - User-level modules are imported into home.nix, which is also sourced into [[./flake.nix][my flake (flake.nix)]]

More detailed information on these specific modules are in the [[./system][system directory]] and [[./user][user directory]] respectively.

** Patches
In some cases, since I use =nixpgs-unstable=, I must patch nixpkgs. This can be done inside of a flake via:
#+BEGIN_SRC nix
    nixpkgs-patched = (import nixpkgs { inherit system; }).applyPatches {
      name = "nixpkgs-patched";
      src = nixpkgs;
      patches = [ ./example-patch.nix ];
    };

    # configure pkgs
    pkgs = import nixpkgs-patched { inherit system; };

    # configure lib
    lib = nixpkgs.lib;
#+END_SRC

Patches can either be local or remote, so you can even import unmerged pull requests by using =fetchpatch= and the raw patch url, i.e: https://github.com/NixOS/nixpkgs/pull/example.patch.

I currently curate patches local to this repo in the [[./patches][patches]] directory.

** Profiles
I separate my configurations into [[./profiles][profiles]] (essentially system templates), i.e:
- [[./profiles/personal][Personal]] - What I would run on a personal laptop/desktop
- [[./profiles/work][Work]] - What I would run on a work laptop/desktop (if they let me bring my own OS :P)
- [[./profiles/homelab][Homelab]] - What I would run on a server or homelab
- [[./profiles/wsl][WSL]] - What I would run underneath Windows Subystem for Linux

My profile can be conveniently selected in [[./flake.nix][my flake.nix]] by setting the =profile= variable.

More detailed information on these profiles is in the [[./profiles][profiles directory]].

** Nix Wrapper Script
Some Nix commands are confusing, really long to type out, or require me to be in the directory with my dotfiles. To solve this, I wrote a [[./system/bin/phoenix.nix][wrapper script called phoenix]], which calls various scripts in the root of this directory.

TLDR:
- =phoenix sync= - Synchronize system and home-manager state with config files (essentially =nixos-rebuild switch= + =home-manager switch=)
  - =phoenix sync system= - Only synchronize system state (essentially =nixos-rebuild switch=)
  - =phoenix sync user= - Only synchronize home-manager state (essentially =home-manager switch=)
- =phoenix update= - Update all flake inputs without synchronizing system and home-manager states
- =phoenix upgrade= - Update flake.lock and synchronize system and home-manager states (=phoenix update= + =phoenix sync=)
- =phoenix refresh= - Call synchronization posthooks (mainly to refresh stylix and some dependent daemons)
- =phoenix pull= - Pull changes from upstream git and attempt to merge local changes (I use this to update systems other than my main system)
- =phoenix harden= - Ensure that all "system-level" files cannot be edited by an unprivileged user
- =phoenix soften= - Relax permissions so all dotfiles can be edited by a normal user (use temporarily for git or other operations)
- =phoenix gc= - Garbage collect the system and user nix stores
  - =phoenix gc full= - Delete everything not currently in use
  - =phoenix gc 15d= - Delete everything older than 15 days
  - =phoenix gc 30d= - Delete everything older than 30 days
  - =phoenix gc Xd= - Delete everything older than X days

** Star History
Didn't think this would get that many [[https://star-history.com/#librephoenix/nixos-config&Date][stars on GitHub]], yet here we are:
[[https://api.star-history.com/svg?repos=librephoenix/nixos-config&type=Date.png]]
